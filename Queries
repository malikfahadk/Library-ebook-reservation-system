CREATE TABLE Users (
    UserID INT PRIMARY KEY IDENTITY,
    Username VARCHAR(50),
    PasswordHash VARCHAR(255)
);

-- 2. Roles
CREATE TABLE Roles (
    RoleID INT PRIMARY KEY IDENTITY,
    RoleName VARCHAR(50)
);

-- 3. UserRoles
CREATE TABLE UserRoles (
    UserID INT FOREIGN KEY REFERENCES Users(UserID),
    RoleID INT FOREIGN KEY REFERENCES Roles(RoleID),
    PRIMARY KEY(UserID, RoleID)
);

-- 4. Members
CREATE TABLE Members (
    MemberID INT PRIMARY KEY IDENTITY,
    UserID INT FOREIGN KEY REFERENCES Users(UserID),
    JoinDate DATE
);

-- 5. Staff
CREATE TABLE Staff (
    StaffID INT PRIMARY KEY IDENTITY,
    UserID INT FOREIGN KEY REFERENCES Users(UserID),
    Position VARCHAR(50)
);

-- 6. Authors
CREATE TABLE Authors (
    AuthorID INT PRIMARY KEY IDENTITY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50)
);

-- 7. Publishers
CREATE TABLE Publishers (
    PublisherID INT PRIMARY KEY IDENTITY,
    Name VARCHAR(100),
    Email VARCHAR(100)
);

-- 8. Categories
CREATE TABLE Categories (
    CategoryID INT PRIMARY KEY IDENTITY,
    Name VARCHAR(100),
    Description VARCHAR(255)
);

-- 9. Books
CREATE TABLE Books (
    BookID INT PRIMARY KEY IDENTITY,
    Title VARCHAR(255),
    CategoryID INT FOREIGN KEY REFERENCES Categories(CategoryID)
);

-- 10. BookAuthors
CREATE TABLE BookAuthors (
    BookID INT FOREIGN KEY REFERENCES Books(BookID),
    AuthorID INT FOREIGN KEY REFERENCES Authors(AuthorID),
    PRIMARY KEY (BookID, AuthorID)
);

-- 11. BookCopies
CREATE TABLE BookCopies (
    CopyID INT PRIMARY KEY IDENTITY,
    BookID INT FOREIGN KEY REFERENCES Books(BookID),
    Format VARCHAR(50)
);

-- 12. BookPublisher
CREATE TABLE BookPublisher (
    BookID INT FOREIGN KEY REFERENCES Books(BookID),
    PublisherID INT FOREIGN KEY REFERENCES Publishers(PublisherID),
    PRIMARY KEY (BookID, PublisherID)
);

-- 13. Lending
CREATE TABLE Lending (
    LendingID INT PRIMARY KEY IDENTITY,
    MemberID INT FOREIGN KEY REFERENCES Members(MemberID),
    CopyID INT FOREIGN KEY REFERENCES BookCopies(CopyID)
);

-- 14. LendingStatus
CREATE TABLE LendingStatus (
    LendingID INT PRIMARY KEY,
    DueDate DATE,
    ReturnDate DATE
);

-- 15. Reservations
CREATE TABLE Reservations (
    ReservationID INT PRIMARY KEY IDENTITY,
    MemberID INT FOREIGN KEY REFERENCES Members(MemberID),
    BookID INT FOREIGN KEY REFERENCES Books(BookID)
);

-- 16. ReservationStatus
CREATE TABLE ReservationStatus (
    ReservationID INT PRIMARY KEY,
    Status VARCHAR(50),
    ExpiryDate DATE
);

-- 17. Reviews
CREATE TABLE Reviews (
    ReviewID INT PRIMARY KEY IDENTITY,
    BookID INT FOREIGN KEY REFERENCES Books(BookID),
    MemberID INT FOREIGN KEY REFERENCES Members(MemberID)
);

-- 18. Ratings
CREATE TABLE Ratings (
    RatingID INT PRIMARY KEY IDENTITY,
    BookID INT FOREIGN KEY REFERENCES Books(BookID),
    Score INT
);

-- 19. Notifications
CREATE TABLE Notifications (
    NotificationID INT PRIMARY KEY IDENTITY,
    UserID INT FOREIGN KEY REFERENCES Users(UserID),
    Message VARCHAR(255)
);

-- 20. Logs
CREATE TABLE Logs (
    LogID INT PRIMARY KEY IDENTITY,
    UserID INT FOREIGN KEY REFERENCES Users(UserID),
    Action VARCHAR(100)
);

-- 21. Fines
CREATE TABLE Fines (
    FineID INT PRIMARY KEY IDENTITY,
    MemberID INT FOREIGN KEY REFERENCES Members(MemberID),
    Amount DECIMAL(6,2)
);

-- 22. FinePayments
CREATE TABLE FinePayments (
    PaymentID INT PRIMARY KEY IDENTITY,
    FineID INT FOREIGN KEY REFERENCES Fines(FineID),
    PaymentDate DATE
);

-- 23. Formats
CREATE TABLE Formats (
    FormatID INT PRIMARY KEY IDENTITY,
    Name VARCHAR(50)
);

-- 24. BookFormats
CREATE TABLE BookFormats (
    CopyID INT FOREIGN KEY REFERENCES BookCopies(CopyID),
    FormatID INT FOREIGN KEY REFERENCES Formats(FormatID),
    PRIMARY KEY (CopyID, FormatID)
);

-- 25. Devices
CREATE TABLE Devices (
    DeviceID INT PRIMARY KEY IDENTITY,
    UserID INT FOREIGN KEY REFERENCES Users(UserID),
    DeviceType VARCHAR(50)
);



-- ====================================================================

-- 1. Users
INSERT INTO Users (Username, PasswordHash) VALUES
('alice', 'hash1'), ('bob', 'hash2'), ('charlie', 'hash3'), ('diana', 'hash4'), ('edward', 'hash5');

-- 2. Roles
INSERT INTO Roles (RoleName) VALUES
('Admin'), ('Librarian'), ('Member'), ('Guest'), ('Manager');

-- 3. UserRoles
INSERT INTO UserRoles (UserID, RoleID) VALUES
(1, 1), (2, 2), (3, 3), (4, 3), (5, 2);

-- 4. Members
INSERT INTO Members (UserID, JoinDate) VALUES
(3, '2023-01-01'), (4, '2023-02-01'), (5, '2023-03-01'), (2, '2023-04-01'), (1, '2023-05-01');

-- 5. Staff
INSERT INTO Staff (UserID, Position) VALUES
(1, 'Admin'), (2, 'Clerk'), (5, 'Manager'), (3, 'Assistant'), (4, 'Technician');

-- 6. Authors
INSERT INTO Authors (FirstName, LastName) VALUES
('John', 'Smith'), ('Emily', 'Clark'), ('Henry', 'Lee'), ('Alice', 'Brown'), ('Mark', 'Davis');

-- 7. Publishers
INSERT INTO Publishers (Name, Email) VALUES
('Pearson', 'contact@pearson.com'),
('OReilly', 'info@oreilly.com'),
('Springer', 'support@springer.com'),
('Wiley', 'help@wiley.com'),
('Packt', 'hello@packtpub.com');

-- 8. Categories
INSERT INTO Categories (Name, Description) VALUES
('Fiction', 'Narrative literature'), 
('Science', 'Scientific content'), 
('History', 'Historical books'), 
('Technology', 'Tech-related material'), 
('Education', 'Educational resources');

-- 9. Books
INSERT INTO Books (Title, CategoryID) VALUES
('Intro to AI', 2), ('World War II', 3), ('Python Basics', 4), ('Digital Marketing', 5), ('Mystery Island', 1);

-- 10. BookAuthors
INSERT INTO BookAuthors (BookID, AuthorID) VALUES
(1, 1), (2, 2), (3, 3), (4, 4), (5, 5);

-- 11. BookCopies
INSERT INTO BookCopies (BookID, Format) VALUES
(1, 'PDF'), (2, 'EPUB'), (3, 'PDF'), (4, 'MOBI'), (5, 'EPUB');

-- 12. BookPublisher
INSERT INTO BookPublisher (BookID, PublisherID) VALUES
(1, 1), (2, 2), (3, 3), (4, 4), (5, 5);

-- 13. Lending
INSERT INTO Lending (MemberID, CopyID) VALUES
(1, 1), (2, 2), (3, 3), (4, 4), (5, 5);

-- 14. LendingStatus
INSERT INTO LendingStatus (LendingID, DueDate, ReturnDate) VALUES
(1, '2023-06-01', '2023-05-30'),
(2, '2023-06-05', NULL),
(3, '2023-06-10', '2023-06-09'),
(4, '2023-06-15', NULL),
(5, '2023-06-20', NULL);

-- 15. Reservations
INSERT INTO Reservations (MemberID, BookID) VALUES
(1, 2), (2, 3), (3, 4), (4, 5), (5, 1);

-- 16. ReservationStatus
INSERT INTO ReservationStatus (ReservationID, Status, ExpiryDate) VALUES
(1, 'Pending', '2023-06-10'),
(2, 'Confirmed', '2023-06-12'),
(3, 'Cancelled', '2023-06-15'),
(4, 'Completed', '2023-06-18'),
(5, 'Expired', '2023-06-20');

-- 17. Reviews
INSERT INTO Reviews (BookID, MemberID) VALUES
(1, 1), (2, 2), (3, 3), (4, 4), (5, 5);

-- 18. Ratings
INSERT INTO Ratings (BookID, Score) VALUES
(1, 5), (2, 4), (3, 3), (4, 5), (5, 4);

-- 19. Notifications
INSERT INTO Notifications (UserID, Message) VALUES
(1, 'Your book is due soon.'),
(2, 'New book available.'),
(3, 'Reservation confirmed.'),
(4, 'Fine payment pending.'),
(5, 'Welcome to the library.');

-- 20. Logs
INSERT INTO Logs (UserID, Action) VALUES
(1, 'Login'), (2, 'Book Borrowed'), (3, 'Review Added'), (4, 'Fine Paid'), (5, 'Logged Out');

-- 21. Fines
INSERT INTO Fines (MemberID, Amount) VALUES
(1, 10.00), (2, 5.50), (3, 7.00), (4, 0.00), (5, 3.25);

-- 22. FinePayments
INSERT INTO FinePayments (FineID, PaymentDate) VALUES
(1, '2023-05-31'),
(2, '2023-06-01'),
(3, '2023-06-02'),
(5, '2023-06-03'),
(4, '2023-06-04');

-- 23. Formats
INSERT INTO Formats (Name) VALUES
('PDF'), ('EPUB'), ('MOBI'), ('AZW'), ('DOCX');

-- 24. BookFormats
INSERT INTO BookFormats (CopyID, FormatID) VALUES
(1, 1), (2, 2), (3, 1), (4, 3), (5, 2);

-- 25. Devices
INSERT INTO Devices (UserID, DeviceType) VALUES
(1, 'Android Tablet'), (2, 'iPhone'), (3, 'Windows PC'), (4, 'MacBook'), (5, 'Kindle');


-- ============================================================================================


INSERT INTO Books (Title, CategoryID)
VALUES ('Data Science 101', 2);


UPDATE Books
SET Title = 'Advanced Data Science'
WHERE Title = 'Data Science 101';


DELETE FROM Books
WHERE Title = 'Advanced Data Science';


SELECT * FROM Books;


SELECT B.BookID, B.Title, C.Name AS CategoryName
FROM Books B
INNER JOIN Categories C ON B.CategoryID = C.CategoryID;


SELECT * FROM Books
WHERE CategoryID = (
    SELECT CategoryID FROM Books
    WHERE Title = 'Intro to AI'
);


SELECT CategoryID, COUNT(*) AS BookCount
FROM Books
GROUP BY CategoryID;


SELECT * FROM Books
WHERE CategoryID = 2
ORDER BY Title ASC;


SELECT CategoryID, COUNT(*) AS TotalBooks
FROM Books
GROUP BY CategoryID
HAVING COUNT(*) > 1;


SELECT TOP 3 * FROM Books
ORDER BY BookID DESC;


SELECT B.Title, C.Name AS Category
FROM Books B
JOIN Categories C ON B.CategoryID = C.CategoryID;


SELECT C.Name AS Category, COUNT(B.BookID) AS TotalBooks
FROM Books B
JOIN Categories C ON B.CategoryID = C.CategoryID
GROUP BY C.Name;
